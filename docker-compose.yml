version: "3.5"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:

### PHP7.2 Workspace Utilities ##################################
    workspace72:
      build:
        context: ./workspace
        args:
          - LARADOCK_PHP_VERSION=7.2
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          # - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          # - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_NPM_ANGULAR_CLI=${WORKSPACE_INSTALL_NPM_ANGULAR_CLI}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_AUTH=${WORKSPACE_COMPOSER_AUTH}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
          - INSTALL_PHALCON=${WORKSPACE_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
          - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
          - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
          - INSTALL_POWERLINE=${WORKSPACE_INSTALL_POWERLINE}
          - INSTALL_FFMPEG=${WORKSPACE_INSTALL_FFMPEG}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - frontend
        - backend

### PHP-FPM 7.2 Container #########################################

    php-fpm7.2:
      image: php-fpm:7.2
      # restart: always
      build:
        context: ./php-fpm
        args:
          - WEBDOCK_PHP_VERSION=7.2
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_TIDEWAYS=${PHP_FPM_INSTALL_TIDEWAYS}
          - INSTALL_SQLCIPHER=${PHP_FPM_INSTALL_SQLCIPHER}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
      volumes:
        # - ./php-fpm/php72.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/webdock.ini:/usr/local/etc/php/conf.d/webdock.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 7.1 Container #########################################

    php-fpm7.1:
      image: php-fpm:7.1
      # restart: always
      build:
        context: ./php-fpm
        args:
          - WEBDOCK_PHP_VERSION=7.1
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_TIDEWAYS=${PHP_FPM_INSTALL_TIDEWAYS}
          - INSTALL_SQLCIPHER=${PHP_FPM_INSTALL_SQLCIPHER}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
      volumes:
        # - ./php-fpm/php71.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/webdock.ini:/usr/local/etc/php/conf.d/webdock.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 7.0 Container #########################################

    php-fpm7.0:
      image: php-fpm:7.0
      # restart: always
      build:
        context: ./php-fpm
        args:
          - WEBDOCK_PHP_VERSION=7.0
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_TIDEWAYS=${PHP_FPM_INSTALL_TIDEWAYS}
          - INSTALL_SQLCIPHER=${PHP_FPM_INSTALL_SQLCIPHER}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
      volumes:
        # - ./php-fpm/php70.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/webdock.ini:/usr/local/etc/php/conf.d/webdock.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 5.6 Container #########################################

    php-fpm5.6:
      image: php-fpm:5.6
      # restart: always
      build:
        context: ./php-fpm
        args:
          - WEBDOCK_PHP_VERSION=5.6
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_TIDEWAYS=${PHP_FPM_INSTALL_TIDEWAYS}
          - INSTALL_SQLCIPHER=${PHP_FPM_INSTALL_SQLCIPHER}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
      volumes:
        # - ./php-fpm/php56.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/webdock.ini:/usr/local/etc/php/conf.d/webdock.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend


### NGINX Server Container ########################################

    nginx:
      image: nginx:alpine
      # restart: always
      volumes:
        - ${NGINX_PATH}/nginx.conf:/etc/nginx/nginx.conf
        - ${NGINX_PATH}/conf.d/default.conf:/etc/nginx/conf.d/default.conf
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_PATH}/sites:/etc/nginx/sites-available
        - ${NGINX_CERT_PATH}:/etc/nginx/certs
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm5.6
        - php-fpm7.0
        - php-fpm7.1
        - php-fpm7.2
      networks:
        - frontend
        - backend

### Apache Server Container #######################################

    # apache2:
    #   build:
    #     context: ./apache2
    #     args:
    #       - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
    #       - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
    #       - PHP_UPSTREAM_TIMEOUT=${APACHE_PHP_UPSTREAM_TIMEOUT}
    #   volumes:
    #     - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
    #     - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
    #   ports:
    #     - "${APACHE_HOST_HTTP_PORT}:80"
    #     - "${APACHE_HOST_HTTPS_PORT}:443"
    #   depends_on:
    #     - php-fpm5.6
    #     - php-fpm7.0
    #     - php-fpm7.1
    #     - php-fpm7.2
    #   networks:
    #     - frontend
    #     - backend

### MySQL Container ###############################################

    mysql:
      # image: mysql:${MYSQL_IMAGE_VERSION}
      # restart: always
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### PostgreSQL Container ##########################################

    postgres:
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### PostgreSQL PostGis Container ##################################

    # postgres-postgis:
    #   build: ./postgres-postgis
    #   volumes:
    #     - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    #   ports:
    #     - "${POSTGRES_PORT}:5432"
    #   environment:
    #     - POSTGRES_DB=${POSTGRES_DB}
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   networks:
    #     - backend

### MongoDB Container #############################################

    mongo:
      image: mongo:latest
      # restart: always
      # environment:
        # - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
        # - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      ports:
        - "${MONGODB_PORT}:27017"
      volumes:
        - ${DATA_SAVE_PATH}/mongo:/data/db
      networks:
        - backend

### Redis Container ###############################################

    redis:
      image: redis:latest
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### Memcached Container ###########################################

    memcached:
      image: memcached:latest
      # build: ./memcached
      volumes:
        - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
      ports:
        - "${MEMCACHED_HOST_PORT}:11211"
      networks:
        - backend

### Beanstalkd Container ##########################################

    beanstalkd:
      image: schickling/beanstalkd:latest
      volumes:
        - ${DATA_SAVE_PATH}/beanstalkd:/var/lib/beanstalkd/data
      ports:
        - "${BEANSTALKD_HOST_PORT}:11300"
      privileged: true
      networks:
        - backend

### RabbitMQ Container ############################################

    rabbitmq:
      build:
        context: ./rabbitmq
        args: 
          - INSTALL_DELAY_PLUGIN=${RABBITMQ_INSTALL_DELAY_PLUGIN}
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      networks:
        - backend

### Beanstalkd Console Container ##################################

    # beanstalkd-console:
    #   build: ./beanstalkd-console
    #   ports:
    #     - "2080:2080"
    #   depends_on:
    #     - beanstalkd
    #   networks:
    #     - backend

### phpMyAdmin Container ##########################################

    phpmyadmin:
      build: ./phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - MYSQL_USER=${PMA_USER}
        - MYSQL_PASSWORD=${PMA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
      ports:
        - "${PMA_PORT}:80"
      depends_on:
        - "${PMA_DB_ENGINE}"
      networks:
        - frontend
        - backend

### pgAdmin Container #############################################

    # pgadmin:
    #   build: ./pgadmin
    #   ports:
    #     - "5050:5050"
    #   volumes:
    #     - ${DATA_SAVE_PATH}/pgadmin-backup:/var/lib/pgadmin/storage/pgadmin4
    #   depends_on:
    #     - postgres
    #   networks:
    #     - frontend
    #     - backend


### ElasticSearch Container #######################################

    # elasticsearch:
    #   build: ./elasticsearch
    #   volumes:
    #     - elasticsearch-data:/usr/share/elasticsearch/data
    #     - elasticsearch-plugins:/usr/share/elasticsearch/plugins
    #   environment:
    #     - cluster.name=laradock-cluster
    #     - bootstrap.memory_lock=true
    #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    #   ulimits:
    #     memlock:
    #       soft: -1
    #       hard: -1
    #   deploy:
    #     resources:
    #       limits:
    #         cpus: '0.50'
    #         memory: 1024M
    #       reservations:
    #         cpus: '0.25'
    #         memory: 512M
    #   ports:
    #     - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
    #     - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    #   depends_on:
    #     - php-fpm5.6
    #     - php-fpm7.0
    #     - php-fpm7.1
    #     - php-fpm7.2
    #   networks:
    #     - frontend
    #     - backend


### Kibana Container ##############################################

    # kibana:
    #   build: ./kibana
    #   ports:
    #     - "${KIBANA_HTTP_PORT}:5601"
    #   depends_on:
    #     - elasticsearch
    #   networks:
    #     - frontend
    #     - backend

### Jenkins #######################################################

    # jenkins:
    #   build: ./jenkins
    #   environment:
    #     JAVA_OPTS: "-Djava.awt.headless=true"
    #   ports:
    #     - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
    #     - "${JENKINS_HOST_HTTP_PORT}:8080"
    #   privileged: true
    #   volumes:
    #     - ${JENKINS_HOME}:/var/jenkins_home
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   networks:
    #     - frontend
    #     - backend

### Grafana Container #############################################

    # grafana:
    #   build:
    #     context: ./grafana
    #   volumes:
    #     - ${DATA_SAVE_PATH}/grafana:/var/lib/grafana
    #   ports:
    #     - "${GRAFANA_PORT}:3000"
    #   networks:
    #     - backend

### Tideways Daemon Container #####################################

    tideways:
      image: scolib/tideways:latest
      environment:
        - TIDEWAYS_DAEMON_EXTRA=${TIDEWAYS_DAEMON_EXTRA}
      ports:
        - "${TIDEWAYS_ADDRESS_PORT}:9135"
      networks:
        - backend
        
### Leanote Container #############################################

    leanote:
      image: scolib/leanote:latest
      # build: ./alpine-leanote
      # restart: always
      environment: 
        - LEANOTE_SITE_URL=${LEANOTE_SITE_URL}
        - LEANOTE_MONGO_HOST=${LEANOTE_MONGO_HOST}
        - LEANOTE_MONGO_PORT=${LEANOTE_MONGO_PORT}
        - LEANOTE_MONGO_DATABASE=${LEANOTE_MONGO_DATABASE}
      volumes:
        - ${LEANOTE_DATA_PATH}:/data
      expose:
        - "9000"
      depends_on:
        - mongo
      networks:
        - backend

### Seafile Pro Container #########################################

    seafile-pro:
      image: scolib/seafile-pro:latest
      # build: ./phusion-seafile-pro
      # restart: always
      environment: 
        - SERVER_NAME=${SEAFILE_SERVER_NAME}
        - SERVER_IP=${SEAFILE_SERVER_IP}
        - ENABLE_CRON_GC=${SEAFILE_ENABLE_CRON_GC}
        - SEAFILE_ADMIN_MAIL=${SEAFILE_SEAFILE_ADMIN_MAIL}
        - SEAFILE_ADMIN_PASS=${SEAFILE_SEAFILE_ADMIN_PASS}
        - DATABASE_TYPE=${SEAFILE_DATABASE_TYPE}
        - MYSQL_ROOT_PASSWD=${SEAFILE_MYSQL_ROOT_PASSWD}
        - MYSQL_HOST=${SEAFILE_MYSQL_HOST}
        - MYSQL_PORT=${SEAFILE_MYSQL_PORT}
        - MYSQL_USER=${SEAFILE_MYSQL_USER}
        - MYSQL_USER_PASSWD=${SEAFILE_MYSQL_USER_PASSWD}
        # - MYSQL_USER_HOST=
        # - DB_PREFIX=
        # - CCNET_DB=
        # - SEAFILE_DB=
        # - SEAHUB_DB=
      volumes:
        - ${SEAFILE_DATA_PATH}:/data
      expose:
        - "8000"
        - "8082"
        - "8080"
      depends_on:
        - mysql
        - memcached
      networks:
        - backend

