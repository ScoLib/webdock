version: "3.5"

services:

### PHP-FPM 7.2 Container #######################################

    php-fpm7.2:
      image: php-fpm:7.2
      restart: always
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
        dockerfile: "Dockerfile-72"
      volumes:
        - ./php-fpm/php72.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
        - ${APPLICATION}:/var/www
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 7.1 Container #######################################

    php-fpm7.1:
      image: php-fpm:7.1
      restart: always
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
        dockerfile: "Dockerfile-71"
      volumes:
        - ./php-fpm/php71.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
        - ${APPLICATION}:/var/www
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 7.0 Container #######################################

    php-fpm7.0:
      image: php-fpm:7.0
      restart: always
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
        dockerfile: "Dockerfile-70"
      volumes:
        - ./php-fpm/php70.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
        - ${APPLICATION}:/var/www
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### PHP-FPM 5.6 Container #######################################

    php-fpm5.6:
      image: php-fpm:5.6
      restart: always
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
        dockerfile: "Dockerfile-56"
      volumes:
        - ./php-fpm/php56.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
        - ${APPLICATION}:/var/www
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend


### NGINX Server Container ##################################

    nginx:
      image: nginx:alpine
      restart: always
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${APPLICATION}:/var/www
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm5.6
        - php-fpm7.0
        - php-fpm7.1
        - php-fpm7.2
      networks:
        - frontend
        - backend

### Apache Server Container #################################

    # apache2:
    #   build:
    #     context: ./apache2
    #     args:
    #       - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
    #       - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
    #       - PHP_UPSTREAM_TIMEOUT=${APACHE_PHP_UPSTREAM_TIMEOUT}
    #   volumes:
    #     - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
    #     - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
    #   ports:
    #     - "${APACHE_HOST_HTTP_PORT}:80"
    #     - "${APACHE_HOST_HTTPS_PORT}:443"
    #   depends_on:
    #     - php-fpm5.6
    #     - php-fpm7.0
    #     - php-fpm7.1
    #     - php-fpm7.2
    #   networks:
    #     - frontend
    #     - backend

### MySQL Container #########################################

    mysql:
      # image: mysql:${MYSQL_IMAGE_VERSION}
      restart: always
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${TIMEZONE}
      volumes:
        - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### PostgreSQL Container ####################################

    postgres:
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### PostgreSQL PostGis Container ############################

    # postgres-postgis:
    #   build: ./postgres-postgis
    #   volumes:
    #     - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    #   ports:
    #     - "${POSTGRES_PORT}:5432"
    #   environment:
    #     - POSTGRES_DB=${POSTGRES_DB}
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   networks:
    #     - backend

### MongoDB Container #######################################

    mongo:
      image: mongo:latest
      restart: always
      # ports:
        # - "${MONGODB_PORT}:27017"
      expose:
        - "27017"
      volumes:
        - ${DATA_SAVE_PATH}/mongo:/data/db
      # environment: 
        # - MONGO_INITDB_DATABASE=leanote
        # - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
        # - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      networks:
        - backend

### Redis Container #########################################

    redis:
      image: redis:latest
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### Memcached Container #####################################

    memcached:
      image: memcached:latest
      # build: ./memcached
      volumes:
        - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
      ports:
        - "${MEMCACHED_HOST_PORT}:11211"
      networks:
        - backend

### Beanstalkd Container ####################################

    beanstalkd:
      image: schickling/beanstalkd:latest
      volumes:
        - ${DATA_SAVE_PATH}/beanstalkd:/var/lib/beanstalkd/data
      ports:
        - "${BEANSTALKD_HOST_PORT}:11300"
      privileged: true
      networks:
        - backend

### RabbitMQ Container ######################################

    # rabbitmq:
    #   build: ./rabbitmq
    #   ports:
    #     - "${RABBITMQ_NODE_HOST_PORT}:5672"
    #     - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
    #     - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    #   privileged: true
    #   environment:
    #     - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
    #     - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    #   depends_on:
    #     - php-fpm5.6
    #     - php-fpm7.0
    #     - php-fpm7.1
    #     - php-fpm7.2
    #   networks:
    #     - backend

### Beanstalkd Console Container ############################

    # beanstalkd-console:
    #   build: ./beanstalkd-console
    #   ports:
    #     - "2080:2080"
    #   depends_on:
    #     - beanstalkd
    #   networks:
    #     - backend

### phpMyAdmin Container ####################################

    phpmyadmin:
      build: ./phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - MYSQL_USER=${PMA_USER}
        - MYSQL_PASSWORD=${PMA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
      ports:
        - "${PMA_PORT}:80"
      depends_on:
        - "${PMA_DB_ENGINE}"
      networks:
        - frontend
        - backend

### pgAdmin Container #######################################

    # pgadmin:
    #   build: ./pgadmin
    #   ports:
    #     - "5050:5050"
    #   volumes:
    #     - ${DATA_SAVE_PATH}/pgadmin-backup:/var/lib/pgadmin/storage/pgadmin4
    #   depends_on:
    #     - postgres
    #   networks:
    #     - frontend
    #     - backend


### ElasticSearch Container #################################

    # elasticsearch:
    #   build: ./elasticsearch
    #   volumes:
    #     - elasticsearch-data:/usr/share/elasticsearch/data
    #     - elasticsearch-plugins:/usr/share/elasticsearch/plugins
    #   environment:
    #     - cluster.name=laradock-cluster
    #     - bootstrap.memory_lock=true
    #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    #   ulimits:
    #     memlock:
    #       soft: -1
    #       hard: -1
    #   deploy:
    #     resources:
    #       limits:
    #         cpus: '0.50'
    #         memory: 1024M
    #       reservations:
    #         cpus: '0.25'
    #         memory: 512M
    #   ports:
    #     - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
    #     - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    #   depends_on:
    #     - php-fpm5.6
    #     - php-fpm7.0
    #     - php-fpm7.1
    #     - php-fpm7.2
    #   networks:
    #     - frontend
    #     - backend


### Kibana Container #######################################

    # kibana:
    #   build: ./kibana
    #   ports:
    #     - "${KIBANA_HTTP_PORT}:5601"
    #   depends_on:
    #     - elasticsearch
    #   networks:
    #     - frontend
    #     - backend

### Certbot Container ##################################

    # certbot:
    #   build:
    #     context: ./certbot
    #   volumes:
    #     - ./data/certbot/certs/:/var/certs
    #     - ./certbot/letsencrypt/:/var/www/letsencrypt
    #   environment:
    #     - CN="fake.domain.com"
    #     - EMAIL="fake.email@gmail.com"
    #   networks:
    #     - frontend

### Jenkins ###################################################

    # jenkins:
    #   build: ./jenkins
    #   environment:
    #     JAVA_OPTS: "-Djava.awt.headless=true"
    #   ports:
    #     - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
    #     - "${JENKINS_HOST_HTTP_PORT}:8080"
    #   privileged: true
    #   volumes:
    #     - ${JENKINS_HOME}:/var/jenkins_home
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   networks:
    #     - frontend
    #     - backend

### Grafana Container #########################################

    # grafana:
    #   build:
    #     context: ./grafana
    #   volumes:
    #     - ${DATA_SAVE_PATH}/grafana:/var/lib/grafana
    #   ports:
    #     - "${GRAFANA_PORT}:3000"
    #   networks:
    #     - backend

### Leanote Container #########################################

    leanote:
      image: scolib/leanote:latest
      # build: ./alpine-leanote
      restart: always
      environment: 
        - LEANOTE_SITE_URL=${LEANOTE_SITE_URL}
        - LEANOTE_MONGO_HOST=${LEANOTE_MONGO_HOST}
        - LEANOTE_MONGO_PORT=${LEANOTE_MONGO_PORT}
        - LEANOTE_MONGO_DATABASE=${LEANOTE_MONGO_DATABASE}
      volumes:
        - ${LEANOTE_DATA_PATH}/conf/app.conf:/data/conf/app.conf
        - ${LEANOTE_DATA_PATH}/files:/data/files
        - ${LEANOTE_DATA_PATH}/upload:/data/upload
        - ${LEANOTE_DATA_PATH}/mongodb_backup:/data/mongodb_backup
      expose:
        - "9000"
      depends_on:
        - mongo
      networks:
        - backend

### Seafile Pro Container #########################################

    seafile-pro:
      image: scolib/seafile-pro:latest
      # build: ./phusion-seafile-pro
      restart: always
      environment: 
        - SERVER_NAME=${SEAFILE_SERVER_NAME}
        - SERVER_IP=${SEAFILE_SERVER_IP}
        - ENABLE_CRON_GC=${SEAFILE_ENABLE_CRON_GC}
        - SEAFILE_ADMIN_MAIL=${SEAFILE_SEAFILE_ADMIN_MAIL}
        - SEAFILE_ADMIN_PASS=${SEAFILE_SEAFILE_ADMIN_PASS}
        - DATABASE_TYPE=${SEAFILE_DATABASE_TYPE}
        - MYSQL_ROOT_PASSWD=${SEAFILE_MYSQL_ROOT_PASSWD}
        - MYSQL_HOST=${SEAFILE_MYSQL_HOST}
        - MYSQL_PORT=${SEAFILE_MYSQL_PORT}
        - MYSQL_USER=${SEAFILE_MYSQL_USER}
        - MYSQL_USER_PASSWD=${SEAFILE_MYSQL_USER_PASSWD}
        # - MYSQL_USER_HOST=
        # - DB_PREFIX=
        # - CCNET_DB=
        # - SEAFILE_DB=
        # - SEAHUB_DB=
      volumes:
        - ${SEAFILE_DATA_PATH}:/data
      expose:
        - "8000"
        - "8082"
        - "8080"
      depends_on:
        - mysql
        - memcached
      networks:
        - backend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
